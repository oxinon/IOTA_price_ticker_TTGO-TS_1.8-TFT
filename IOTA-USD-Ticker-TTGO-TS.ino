// This is a simple price ticker for the esp32 based TTGO-TS 1.8 TFT,
// the data come from Coinmarketcap.com
// Code on Github https://github.com/oxinon/IOTA_price_ticker_TTGO-TS_1.8-TFT
// Importen to know is that you are use the right library, and the screen shifting issue is solved when 
// you edit the Adafruit_ST7735.h manualy, or download "Adafruit_ST7735_and_ST7789_Library-TS18"
// and replace the "Adafruit_ST7735_and_ST7789_Library" !

#include <CoinMarketCapApi.h>

#include <WiFi.h> // use the esp32 WiFi.h library, delete the stock WiFi.h !
#include <WiFiClientSecure.h>

#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7735.h> // Hardware-specific library use version from "Aruinojson by Benholt Blanchon Version 5.13.4
#include <SPI.h>

#include <ArduinoJson.h>

#define TFT_CS 16
#define TFT_RST 9
#define TFT_DC 17
#define TFT_SCLK 5
#define TFT_MOSI 23
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_MOSI, TFT_SCLK, TFT_RST);

// supportet colors
#define ST7735_BLACK   0x0000
#define ST7735_GRAY    0x8410
#define ST7735_WHITE   0xFFFF
#define ST7735_RED     0xF800
#define ST7735_ORANGE  0xEC80
#define ST7735_YELLOW  0xFFE0  
#define ST7735_LIME    0x07FF
#define ST7735_GREEN   0x07E0
#define ST7735_CYAN    0x07FF
#define ST7735_AQUA    0x04FF
#define ST7735_BLUE    0x001F
#define ST7735_MAGENTA 0xF81F
#define ST7735_PINK    0xF8FF

//------- Replace the following! ------
char ssid[] = "YOUR-AP";       // your network SSID (name)
char password[] = "YOUR-PASS";  // your network key


WiFiClientSecure client;
CoinMarketCapApi api(client);

// CoinMarketCap's limit is "no more than 10 per minute"
// Make sure to factor in if you are requesting more than one coin.
unsigned long api_mtbs = 60000; //mean time between api requests
unsigned long api_due_time = 0;

// bootsplash image logo
static const unsigned char PROGMEM logo_iota_start[] =
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xc0,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xe0,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xf0,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xf0,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xf8,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xf8,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xf0,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xf0,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x1f,0xe0,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x7c,0x08,0x00,0x00,0x0f,0xc0,0x00,0x00,0x00
,0x00,0x00,0x01,0xe0,0xfc,0x3c,0x00,0x00,0x03,0x00,0x00,0x00,0x00
,0x00,0x00,0x03,0xf0,0xfe,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x03,0xf8,0xfe,0x7e,0x38,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x07,0xf8,0xfc,0x3e,0x7c,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x07,0xf8,0x78,0x3c,0x7c,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x03,0xf8,0x00,0x00,0x78,0xc0,0x03,0xe0,0x00,0x00,0x00
,0x00,0x00,0x03,0xf0,0x00,0x00,0x39,0xe0,0x07,0xf0,0x0c,0x00,0x00
,0x00,0x00,0x00,0xc0,0x00,0x00,0x01,0xe0,0x07,0xf8,0x3f,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xe0,0x0f,0xf8,0x7f,0x80,0x00
,0x00,0x00,0x00,0x00,0x1e,0x00,0x00,0x8c,0x0f,0xf8,0xff,0x80,0x00
,0x00,0x00,0x00,0x78,0x3f,0x0f,0x00,0x1e,0x0f,0xf8,0xff,0x80,0x00
,0x00,0x00,0x00,0xfc,0x3f,0x1f,0x80,0x1e,0x07,0xf8,0xff,0x80,0x00
,0x00,0x00,0x01,0xfe,0x3f,0x1f,0x8e,0x0c,0x07,0xf0,0xff,0x80,0x00
,0x00,0x00,0x01,0xfe,0x3f,0x1f,0x9e,0x00,0x01,0xe0,0x7f,0x80,0x00
,0x00,0x03,0xc1,0xfe,0x1e,0x0f,0x1e,0x00,0x00,0x00,0x3f,0x00,0x00
,0x00,0x0f,0xe1,0xfc,0x00,0x00,0x1e,0x20,0x00,0x00,0x0c,0x00,0x00
,0x00,0x0f,0xf0,0xfc,0x00,0x00,0x0e,0x70,0x00,0x00,0x00,0x00,0x00
,0x00,0x1f,0xf0,0x70,0x00,0x00,0x00,0xf8,0x01,0x00,0x00,0x00,0x00
,0x00,0x1f,0xf0,0x00,0x00,0x00,0x00,0x70,0x07,0xc0,0x00,0x00,0x00
,0x00,0x1f,0xf0,0x00,0x00,0x00,0x00,0x20,0x0f,0xe0,0x38,0x00,0x00
,0x00,0x0f,0xf0,0x00,0x00,0xf0,0x00,0x00,0x1f,0xe0,0xfc,0x00,0x00
,0x00,0x0f,0xe0,0x03,0x81,0xf8,0x70,0x00,0x1f,0xe0,0xfe,0x00,0x00
,0x00,0x07,0xc0,0x0f,0xe3,0xf8,0xf8,0x00,0x0f,0xe1,0xfe,0x00,0x00
,0x00,0x00,0x00,0x0f,0xe3,0xf8,0xf8,0x60,0x0f,0xe1,0xfe,0x1e,0x00
,0x00,0x00,0x00,0x0f,0xe1,0xf8,0xf9,0xf0,0x07,0xc0,0xfe,0x3f,0x00
,0x00,0x00,0x1c,0x0f,0xe1,0xf0,0xf9,0xf0,0x00,0x00,0xfc,0x7f,0x80
,0x00,0x00,0x7e,0x0f,0xe0,0x40,0x21,0xf0,0x00,0x00,0x78,0x7f,0x80
,0x00,0x00,0xff,0x0f,0xe0,0x00,0x00,0xe0,0x00,0x00,0x00,0x7f,0x80
,0x00,0x00,0xff,0x83,0x80,0x00,0x00,0x00,0x3c,0x00,0x00,0x7f,0x00
,0x00,0x00,0xff,0x80,0x00,0x00,0x00,0x00,0x7e,0x01,0x80,0x3f,0x00
,0x00,0x00,0xff,0x80,0x00,0x00,0x00,0x00,0x7e,0x07,0xc0,0x0c,0x00
,0x00,0x00,0xff,0x80,0x00,0x00,0x00,0x00,0x7e,0x07,0xe0,0x00,0x00
,0x00,0x00,0x7f,0x00,0x00,0x60,0x00,0x00,0x7e,0x0f,0xe0,0x00,0x00
,0x03,0xe0,0x3e,0x00,0x00,0xf0,0x00,0x00,0x7c,0x0f,0xe0,0xe0,0x00
,0x07,0xf8,0x00,0x00,0x00,0xf8,0x00,0x00,0x00,0x07,0xe1,0xf0,0x00
,0x0f,0xf8,0x00,0x00,0x00,0xf0,0x00,0x00,0x00,0x03,0xc3,0xf8,0x00
,0x0f,0xfc,0x00,0x00,0x70,0xf0,0x00,0x07,0x80,0x00,0x03,0xf8,0x00
,0x1f,0xfc,0x00,0x10,0xf8,0x00,0x00,0x0f,0xc0,0x30,0x03,0xf8,0x00
,0x1f,0xfc,0x00,0x38,0xf8,0x00,0x00,0x0f,0xc0,0x78,0x01,0xf0,0x00
,0x1f,0xfc,0x00,0x38,0x70,0x38,0x00,0x0f,0xc0,0xfc,0x00,0xe0,0x00
,0x0f,0xf8,0x00,0x38,0x00,0x7c,0x00,0x07,0x80,0xfc,0x00,0x00,0x00
,0x07,0xf8,0x00,0x00,0x00,0x7e,0x00,0xe0,0x00,0xf8,0x1c,0x00,0x00
,0x03,0xf0,0x00,0x60,0x70,0x7e,0x01,0xf0,0x00,0x30,0x3e,0x00,0x00
,0x00,0xc0,0x00,0x70,0xf8,0x7c,0x01,0xf0,0x0e,0x00,0x3e,0x00,0x00
,0x00,0x00,0x00,0xf8,0xf8,0x18,0x01,0xf0,0x1f,0x00,0x3e,0x00,0x00
,0x00,0x00,0x00,0x70,0x78,0x00,0x00,0xe0,0x1f,0x00,0x3e,0x00,0x00
,0x00,0x00,0x00,0x20,0x30,0x01,0x80,0x00,0x8f,0x01,0x08,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x07,0xc0,0x03,0xc6,0x07,0x80,0x00,0x00
,0x00,0x00,0x00,0x70,0x00,0x07,0xe0,0x03,0xc0,0x07,0xc0,0x00,0x00
,0x00,0x00,0x00,0x78,0x3e,0x07,0xe0,0x03,0xc0,0x07,0xc0,0x00,0x00
,0x00,0x00,0x00,0xf8,0x3e,0x07,0xe0,0x01,0x80,0x67,0x80,0x00,0x00
,0x00,0x00,0x00,0xf8,0x3e,0x07,0xe0,0x00,0x00,0xf0,0x00,0x00,0x00
,0x00,0x00,0x00,0x70,0x3e,0x03,0xc0,0x00,0x0c,0xf0,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x1c,0xe0,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x80,0x1c,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x1c,0x00,0x00,0x1f,0xc0,0x08,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x3e,0x01,0xc0,0x1f,0xc0,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x3e,0x03,0xe0,0x1f,0xc0,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x3e,0x07,0xf0,0x1f,0xc0,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x3e,0x07,0xf0,0x1f,0xc0,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x1c,0x07,0xe0,0x0f,0x81,0x80,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x03,0xe0,0x02,0x07,0xe0,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x01,0x80,0x80,0x00,0x0f,0xf0,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x03,0xe0,0x03,0x00,0x0f,0xf8,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x07,0xf0,0x0f,0xc0,0x0f,0xf8,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x07,0xf0,0x1f,0xe0,0x0f,0xf8,0x0e,0x00,0x00,0x00
,0x00,0x00,0x00,0x07,0xf0,0x1f,0xe0,0x0f,0xf8,0x3f,0x80,0x00,0x00
,0x00,0x00,0x00,0x03,0xe0,0x1f,0xe0,0x0f,0xf0,0x7f,0xc0,0x00,0x00
,0x00,0x00,0x00,0x01,0xc0,0x1f,0xe0,0x07,0xe0,0xff,0xc0,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x0f,0xc0,0x00,0x80,0xff,0xe0,0x00,0x00
,0x00,0x00,0x00,0x00,0x07,0x87,0x81,0xe0,0x00,0xff,0xe0,0x00,0x00
,0x00,0x00,0x00,0x00,0x0f,0xc0,0x07,0xf0,0x00,0xff,0xe0,0x00,0x00
,0x00,0x00,0x00,0x00,0x1f,0xe0,0x07,0xf8,0x00,0xff,0xc0,0x00,0x00
,0x00,0x00,0x00,0x00,0x1f,0xe0,0x0f,0xf8,0x00,0x7f,0xc0,0x00,0x00
,0x00,0x00,0x00,0x00,0x1f,0xe0,0x0f,0xf8,0x00,0x3f,0x80,0x00,0x00
,0x00,0x00,0x00,0x00,0x0f,0xe0,0x0f,0xf8,0x00,0x1f,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x0f,0xc0,0x07,0xf8,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x01,0x00,0x07,0xf0,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xe0,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  
};

// ticker img logo
static const unsigned char PROGMEM logo_iota[] =
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0xf8,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0xfc,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0xfc,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0xfc,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0xf8,0x00,0x00
,0x00,0x00,0x0e,0x20,0x00,0x70,0x00,0x00
,0x00,0x07,0x9e,0x70,0x00,0x00,0x00,0x00
,0x00,0x07,0x9e,0x77,0x00,0x00,0x00,0x00
,0x00,0x07,0x8c,0x27,0x00,0x00,0x00,0x00
,0x00,0x07,0x80,0x03,0x60,0x7c,0x20,0x00
,0x00,0x00,0x00,0x00,0x60,0x7c,0x78,0x00
,0x00,0x00,0x07,0x10,0x08,0x7c,0xf8,0x00
,0x00,0x03,0xcf,0x38,0x1c,0x7c,0xfc,0x00
,0x00,0x03,0xef,0x39,0x80,0x38,0x78,0x00
,0x00,0xe3,0xe6,0x3b,0x80,0x00,0x70,0x00
,0x01,0xf3,0xc0,0x01,0xb0,0x00,0x00,0x00
,0x01,0xf0,0x00,0x00,0x30,0x70,0x00,0x00
,0x01,0xf0,0x00,0x00,0x00,0x78,0x60,0x00
,0x01,0xe0,0x31,0xe6,0x00,0xf8,0xf0,0x00
,0x00,0x00,0x79,0xe7,0x20,0x79,0xf1,0x80
,0x00,0x00,0x79,0xe7,0x70,0x30,0xf3,0xc0
,0x00,0x3c,0x78,0xc2,0x70,0x00,0x67,0xc0
,0x00,0x3e,0x30,0x00,0x00,0xc0,0x07,0xc0
,0x00,0x7e,0x00,0x00,0x01,0xe1,0x83,0x80
,0x00,0x3e,0x00,0x00,0x01,0xe3,0xc0,0x00
,0x0e,0x3c,0x00,0xc0,0x01,0xc3,0xc4,0x00
,0x1f,0x00,0x00,0xe0,0x00,0x03,0x8e,0x00
,0x3f,0x00,0x0c,0xc0,0x06,0x00,0x0f,0x00
,0x3f,0x00,0x9c,0x00,0x0f,0x0c,0x0e,0x00
,0x3f,0x00,0x88,0x60,0x0e,0x1e,0x04,0x00
,0x1f,0x00,0x00,0x70,0x20,0x1c,0x30,0x00
,0x0c,0x01,0x9c,0x70,0x70,0x60,0x70,0x00
,0x00,0x01,0x9c,0x20,0x70,0xe0,0x70,0x00
,0x00,0x00,0x08,0x08,0x02,0x61,0x20,0x00
,0x00,0x00,0x00,0x1e,0x07,0x03,0x80,0x00
,0x00,0x01,0x8e,0x1e,0x07,0x03,0x80,0x00
,0x00,0x01,0x8e,0x1e,0x00,0x1c,0x00,0x00
,0x00,0x00,0x0e,0x00,0x00,0xd8,0x00,0x00
,0x00,0x00,0x00,0x01,0xc0,0xc0,0x00,0x00
,0x00,0x00,0xe1,0x81,0xe0,0x00,0x00,0x00
,0x00,0x01,0xe3,0xc1,0xe0,0x00,0x00,0x00
,0x00,0x00,0xc3,0xc1,0xe0,0x00,0x00,0x00
,0x00,0x00,0x01,0xc0,0x87,0x00,0x00,0x00
,0x00,0x00,0x38,0x08,0x0f,0x80,0x00,0x00
,0x00,0x00,0x78,0x3c,0x0f,0x80,0x00,0x00
,0x00,0x00,0x78,0x3e,0x0f,0x8f,0x00,0x00
,0x00,0x00,0x38,0x3e,0x07,0x0f,0x80,0x00
,0x00,0x00,0x00,0x3c,0x00,0x1f,0xc0,0x00
,0x00,0x00,0x03,0x80,0xf0,0x1f,0xc0,0x00
,0x00,0x00,0x07,0xc1,0xf8,0x0f,0x80,0x00
,0x00,0x00,0x07,0xc1,0xf8,0x0f,0x80,0x00
,0x00,0x00,0x03,0x80,0xf8,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00

};


void setup() {
  
   
  Serial.begin(115200);
  
  // Use this initializer if you're using a 1.8" TFT
  tft.initR(INITR_BLACKTAB);   // initialize a ST7735S chip, black tab
  uint16_t time = millis();
  tft.fillScreen(ST7735_BLACK);
  time = millis() - time;
  text1(" Starting...", ST7735_WHITE);
  delay(1000);

  // Attempt to connect to Wifi network:
  Serial.print("Connecting Wifi: ");
  tft.setTextColor(ST7735_WHITE);
  tft.setCursor(0, 10);
  tft.setTextSize(1);
  tft.print(" Connect Wifi: ");
  
  Serial.println(ssid);
  tft.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    tft.setCursor(0, 20);    
    delay(500);
    Serial.println(time, DEC);
    delay(500); 
  }
  
  Serial.println("");
  tft.println("");   
  Serial.println("WiFi connected");
  tft.println(" WiFi connected");   
  Serial.println("IP address: ");
  tft.println(" IP address: ");
  
  IPAddress ip = WiFi.localIP();
  Serial.println(ip);
  tft.print(" "); 
  tft.println(ip);
  delay(3000);
  
  tft.setTextWrap(false);
  tft.fillScreen(ST7735_BLACK);

  tft.drawBitmap(13, 25, logo_iota_start, 100, 100, ST7735_WHITE);

  tft.setCursor(18, 135);
  tft.setTextColor(ST7735_CYAN);
  tft.setTextSize(1);
  tft.println("IOTA USD ticker");
  tft.drawLine(13, 145, 113, 145, ST7735_WHITE);
  delay(6000);
  tft.fillScreen(ST7735_BLACK);

}

void text1(char *text, uint16_t color) {
  tft.setCursor(0, 0);
  tft.setTextColor(color);
  tft.setTextWrap(true);
  tft.print(text);
}


void printTickerData(String ticker) {
  Serial.println("---------------------------------");
  Serial.println("Getting ticker data for " + ticker);


  // Ticker unfortunately is not the symbol for some reason.
  // Go to CoinMarketCap.com and select the coin you would like to check
  // The ticker name makes up the last part of the URL
  // e.g: http://coinmarketcap.com/currencies/iota/ , "iota" is the ticker value

  // Currency is optional, so you can pass only ticker if you want.
  // Check out the currency drop down on CoinMarketCap.com to get available values
  CMCTickerResponse response = api.GetTickerInfo(ticker, "eur");
  if (response.error == "") {
    Serial.print("ID: ");
    Serial.println(response.id);
    Serial.print("Name: ");
    Serial.println(response.name);
    Serial.print("Symbol: ");
    Serial.println(response.symbol);

    Serial.print("Rank: ");
    Serial.println(response.rank);

    Serial.print("Price in USD: ");
    Serial.println(response.price_usd);
    Serial.print("Price in BTC: ");
    Serial.println(response.price_btc);

    Serial.print("24h Volume USD: ");
    Serial.println(response.volume_usd_24h);
    Serial.print("Market Cap USD: ");
    Serial.println(response.market_cap_usd);

    Serial.print("Available Supply: ");
    Serial.println(response.available_supply);
    Serial.print("Total Supply: ");
    Serial.println(response.total_supply);

    Serial.print("Percent Change 1h: ");
    Serial.println(response.percent_change_1h);
    Serial.print("Percent Change 24h: ");
    Serial.println(response.percent_change_24h);
    Serial.print("Percent Change 7d: ");
    Serial.println(response.percent_change_7d);
    Serial.print("Last Updated: ");
    Serial.println(response.last_updated);


   tft.setTextWrap(false);
  //tft.fillScreen(ST7735_BLACK);

  tft.drawBitmap(33, 2, logo_iota, 60, 60, ST7735_WHITE);
  
 // tft.drawLine(11, 71, 116, 71, ST7735_WHITE);

  tft.setTextColor(ST7735_YELLOW);
  
 if(response.percent_change_1h < 0){
  tft.setTextColor(ST7735_RED);
 }
 if(response.percent_change_1h > 0){
  tft.setTextColor(ST7735_GREEN);
 }
 
  tft.setCursor(5, 70);
  tft.setTextSize(2);
  tft.print("$");
  
  tft.fillRect(20, 70, 106, 21, ST7735_BLACK);
  tft.setCursor(20, 70);
  tft.setTextSize(3);
  tft.println(response.price_usd);
  
  tft.drawLine(11, 121, 116, 121, ST7735_WHITE);
  
  tft.fillRect(75, 100, 51, 14, ST7735_BLACK);
  tft.setCursor(20, 100);
  tft.setTextColor(ST7735_AQUA);
  tft.setTextSize(2);
  tft.print("Rank:");
  tft.println(response.rank);


  tft.setTextColor(ST7735_YELLOW);

 if(response.percent_change_1h < 0){
  tft.setTextColor(ST7735_RED);
 }
 if(response.percent_change_1h > 0){
  tft.setTextColor(ST7735_GREEN);
 }

  tft.fillRect(85, 130, 43, 30, ST7735_BLACK);
  tft.setCursor(5, 130);
  tft.setTextSize(1);
  tft.print("% Change  1h: ");
  tft.println(response.percent_change_1h);

  tft.setTextColor(ST7735_YELLOW);

 if(response.percent_change_24h < 0){
  tft.setTextColor(ST7735_RED);
 }
 if(response.percent_change_24h > 0){
  tft.setTextColor(ST7735_GREEN);
 } 
  tft.setCursor(5, 140);
  tft.setTextSize(1);
  tft.print("% Change 24h: ");
  tft.println(response.percent_change_24h);

  tft.setTextColor(ST7735_YELLOW);

 if(response.percent_change_7d < 0){
  tft.setTextColor(ST7735_RED);
 }
 if(response.percent_change_7d > 0){
  tft.setTextColor(ST7735_GREEN);
 }  
  tft.setCursor(5, 150);
  tft.setTextSize(1);
  tft.print("% Change  7d: ");
  tft.println(response.percent_change_7d);
  tft.fillCircle(115, 11, 8, ST7735_BLACK);

} 
  
  else {
    Serial.print("Error getting data: ");
    Serial.println(response.error);
    tft.fillCircle(115, 11, 8, ST7735_RED);
  }
  Serial.println("---------------------------------");
}

void loop() {
  unsigned long timeNow = millis();
  if ((timeNow > api_due_time))  {
    printTickerData("iota");
    api_due_time = timeNow + api_mtbs;
  }
 
}
